import ROOT as r


def angleInPie(absAngle):
    if absAngle > r.TMath.Pi():
        return 2*r.TMath.Pi() - absAngle
    else:
        return absAngle


def findVar(iTree, varName):
    varsDict = {'EVENT': iTree.EVENT,
                'HMass': iTree.HMass, 
                'charge1': iTree.charge1.at(0), 
                'charge2': iTree.charge2.at(0),
                'pt1': iTree.pt1.at(0), 
                'pt2': iTree.pt2.at(0), 
                'tightPt': iTree.pt1.at(0) if iTree.iso1.at(0) < iTree.iso2.at(0) else iTree.pt2.at(0),
                'relaxPt': iTree.pt1.at(0) if iTree.iso1.at(0) > iTree.iso2.at(0) else iTree.pt2.at(0),
                'pt1pt2': iTree.pt1.at(0)+iTree.pt2.at(0), 
                'iso1': iTree.iso1.at(0), 
                'iso2': iTree.iso2.at(0), 
                'phi1': iTree.phi1.at(0), 
                'phi2': iTree.phi2.at(0), 
                'eta1': iTree.eta1.at(0), 
                'eta2': iTree.eta2.at(0), 
                'NBTags': iTree.NBTags, 
                'J1CSVbtag': iTree.J1CSVbtag,
                'J1Eta': iTree.J1Eta,
                'J1Mass': iTree.J1Mass,
                'J1Pt': iTree.J1Pt,
                'J2CSVbtag': iTree.J2CSVbtag,
                'J2Eta': iTree.J2Eta,
                'J2Mass': iTree.J2Mass,
                'J2Pt': iTree.J2Pt,
                'J3CSVbtag': iTree.J3CSVbtag,
                'J3Eta': iTree.J3Eta,
                'J3Mass': iTree.J3Mass,
                'J3Pt': iTree.J3Pt,
                'J4CSVbtag': iTree.J4CSVbtag,
                'J4Eta': iTree.J4Eta,
                'J4Mass': iTree.J4Mass,
                'J4Pt': iTree.J4Pt,
                'svMass': iTree.svMass.at(0),
                'mJJ': iTree.mJJ,
                'ptJJ': iTree.ptJJ,
                'etaJJ': iTree.etaJJ,
                'CSVJ1': iTree.CSVJ1,
                'CSVJ2': iTree.CSVJ2,
                'fMass': iTree.fMass,
                'fMassKinFit': iTree.fMassKinFit,
                'chi2KinFit': iTree.chi2KinFit,
                'chi2KinFit2': iTree.chi2KinFit2,
                'dPhiMetTau1': iTree.metTau1DPhi,
                'dPhiMetTau2': iTree.metTau2DPhi,
                'dPhiMetJet1': iTree.metJ1DPhi,
                'dPhiMetJet2': iTree.metJ2DPhi,
                'dPhiMetTauPair': iTree.metTauPairDPhi,
                'dPhiMetJetPair': iTree.metJetPairDPhi,
                'dPhiMetSVTauPair': iTree.metSvTauPairDPhi,
                'dRTauTau': iTree.dRTauTau,
                'dPhiTauTau': angleInPie(abs(iTree.phi1.at(0) - iTree.phi2.at(0))),
                'dEtaTauTau': angleInPie(abs(iTree.eta1.at(0) - iTree.eta2.at(0))),
                'dRJJ': iTree.dRJJ,
                'dRhh': iTree.dRhh,
#                'mJJReg': iTree.mJJReg,
#                 'BDT_EWK': iTree.BDT_EWK,
#                 'BDT_QCD': iTree.BDT_QCD,
#                 'BDT_both': iTree.BDT_both,
                'met': iTree.met.at(0),
                'svPt': iTree.svPt.at(0),
                'nTauPairs': iTree.pt1.size(),
                'byIsolationMVA2raw_1': iTree.byIsolationMVA2raw_1,
                'byIsolationMVA2raw_2': iTree.byIsolationMVA2raw_2,

#                 'J1GenPt': iTree.J1GenPt,
#                 'J1GenEta': iTree.J1GenEta,
#                 'J1GenPhi': iTree.J1GenPhi,
#                 'J1GenMass': iTree.J1GenMass,
#                 'J2GenPt': iTree.J2GenPt,
#                 'J2GenEta': iTree.J2GenEta,
#                 'J2GenPhi': iTree.J2GenPhi,
#                 'J2GenMass': iTree.J2GenMass,
#                 'J3GenPt': iTree.J3GenPt,
#                 'J3GenEta': iTree.J3GenEta,
#                 'J3GenPhi': iTree.J3GenPhi,
#                 'J3GenMass': iTree.J3GenMass,
#                 'J4GenPt': iTree.J4GenPt,
#                 'J4GenEta': iTree.J4GenEta,
#                 'J4GenPhi': iTree.J4GenPhi,
#                 'J4GenMass': iTree.J4GenMass,
#                 'genBPt': iTree.genBPt,
#                 'genBEta': iTree.genBEta,
#                 'genBPhi': iTree.genBPhi,
#                 'genBMass': iTree.genBMass,
    }
    
    if varName in varsDict:
        return varsDict[varName]
    else:
        print 'Variable: %s not defined in varList.py' %varName
        return 'Null'

def findVarInChain(iChain, varName):
    varsDict = {
                'J1GenPt': iChain.J1GenPt,
                'J1GenEta': iChain.J1GenEta,
                'J1GenPhi': iChain.J1GenPhi,
                'J1GenMass': iChain.J1GenMass,
                'J2GenPt': iChain.J2GenPt,
                'J2GenEta': iChain.J2GenEta,
                'J2GenPhi': iChain.J2GenPhi,
                'J2GenMass': iChain.J2GenMass,
                'J3GenPt': iChain.J3GenPt,
                'J3GenEta': iChain.J3GenEta,
                'J3GenPhi': iChain.J3GenPhi,
                'J3GenMass': iChain.J3GenMass,
                'J4GenPt': iChain.J4GenPt,
                'J4GenEta': iChain.J4GenEta,
                'J4GenPhi': iChain.J4GenPhi,
                'J4GenMass': iChain.J4GenMass,
                'J1PtUncorr': iChain.J1PtUncorr,
                'J1VtxPt': iChain.J1VtxPt,
                'J1Vtx3dL': iChain.J1Vtx3dL,
                'J1Vtx3deL': iChain.J1Vtx3deL,
                'J1ptLeadTrk': iChain.J1ptLeadTrk,
                'J1vtxMass': iChain.J1vtxMass,
                'J1vtxPt': iChain.J1vtxPt,
                'J1Ntot': iChain.J1Ntot,
                'J1SoftLeptPt': iChain.J1SoftLepPt,
                'J1SoftLeptEta': iChain.J1SoftLepEta,
                'J1SoftLeptPhi': iChain.J1SoftLepPhi,
                'J1SoftLeptPID': iChain.J1SoftLepPID,
                'J1JECUnc': iChain.J1JECUnc,
                'J1Et': iChain.J1Et,
                'J1Mt': iChain.J1Mt,

                'J2PtUncorr': iChain.J2PtUncorr,
                'J2VtxPt': iChain.J2VtxPt,
                'J2Vtx3dL': iChain.J2Vtx3dL,
                'J2Vtx3deL': iChain.J2Vtx3deL,
                'J2ptLeadTrk': iChain.J2ptLeadTrk,
                'J2vtxMass': iChain.J2vtxMass,
                'J2vtxPt': iChain.J2vtxPt,
                'J2Ntot': iChain.J2Ntot,
                'J2SoftLeptPt': iChain.J2SoftLepPt,
                'J2SoftLeptEta': iChain.J2SoftLepEta,
                'J2SoftLeptPhi': iChain.J2SoftLepPhi,
                'J2SoftLeptPID': iChain.J2SoftLepPID,
                'J2JECUnc': iChain.J2JECUnc,
                'J2Et': iChain.J2Et,
                'J2Mt': iChain.J2Mt,

                'J3PtUncorr': iChain.J3PtUncorr,
                'J3VtxPt': iChain.J3VtxPt,
                'J3Vtx3dL': iChain.J3Vtx3dL,
                'J3Vtx3deL': iChain.J3Vtx3deL,
                'J3ptLeadTrk': iChain.J3ptLeadTrk,
                'J3vtxMass': iChain.J3vtxMass,
                'J3vtxPt': iChain.J3vtxPt,
                'J3Ntot': iChain.J3Ntot,
                'J3SoftLeptPt': iChain.J3SoftLepPt,
                'J3SoftLeptEta': iChain.J3SoftLepEta,
                'J3SoftLeptPhi': iChain.J3SoftLepPhi,
                'J3SoftLeptPID': iChain.J3SoftLepPID,
                'J3JECUnc': iChain.J3JECUnc,
                'J3Et': iChain.J3Et,
                'J3Mt': iChain.J3Mt,

                'J4PtUncorr': iChain.J4PtUncorr,
                'J4VtxPt': iChain.J4VtxPt,
                'J4Vtx3dL': iChain.J4Vtx3dL,
                'J4Vtx3deL': iChain.J4Vtx3deL,
                'J4ptLeadTrk': iChain.J4ptLeadTrk,
                'J4vtxMass': iChain.J4vtxMass,
                'J4vtxPt': iChain.J4vtxPt,
                'J4Ntot': iChain.J4Ntot,
                'J4SoftLeptPt': iChain.J4SoftLepPt,
                'J4SoftLeptEta': iChain.J4SoftLepEta,
                'J4SoftLeptPhi': iChain.J4SoftLepPhi,
                'J4SoftLeptPID': iChain.J4SoftLepPID,
                'J4JECUnc': iChain.J4JECUnc,
                'J4Et': iChain.J4Et,
                'J4Mt': iChain.J4Mt,

                'J1Eta': iChain.J1Eta,
                'J1Mass': iChain.J1Mass,
                'J1Pt': iChain.J1Pt,
                'J1Phi': iChain.J1Phi,
                'J2Eta': iChain.J2Eta,
                'J2Mass': iChain.J2Mass,
                'J2Pt': iChain.J2Pt,
                'J2Phi': iChain.J2Phi,
                'J3Eta': iChain.J3Eta,
                'J3Mass': iChain.J3Mass,
                'J3Pt': iChain.J3Pt,
                'J3Phi': iChain.J3Phi,
                'J4Eta': iChain.J4Eta,
                'J4Mass': iChain.J4Mass,
                'J4Pt': iChain.J4Pt,
                'J4Phi': iChain.J4Phi,

#                 'genBPt': iChain.genBPt,
#                 'genBEta': iChain.genBEta,
#                 'genBPhi': iChain.genBPhi,
#                 'genBMass': iChain.genBMass,
    }

def findVarInChain_Data(iChain, varName):
    varsDict = {
                'J1PtUncorr': iChain.J1PtUncorr,
                'J1VtxPt': iChain.J1VtxPt,
                'J1Vtx3dL': iChain.J1Vtx3dL,
                'J1Vtx3deL': iChain.J1Vtx3deL,
                'J1ptLeadTrk': iChain.J1ptLeadTrk,
                'J1vtxMass': iChain.J1vtxMass,
                'J1vtxPt': iChain.J1vtxPt,
                'J1Ntot': iChain.J1Ntot,
                'J1SoftLeptPt': iChain.J1SoftLepPt,
                'J1SoftLeptEta': iChain.J1SoftLepEta,
                'J1SoftLeptPhi': iChain.J1SoftLepPhi,
                'J1SoftLeptPID': iChain.J1SoftLepPID,
                'J1JECUnc': iChain.J1JECUnc,
                'J1Et': iChain.J1Et,
                'J1Mt': iChain.J1Mt,

                'J2PtUncorr': iChain.J2PtUncorr,
                'J2VtxPt': iChain.J2VtxPt,
                'J2Vtx3dL': iChain.J2Vtx3dL,
                'J2Vtx3deL': iChain.J2Vtx3deL,
                'J2ptLeadTrk': iChain.J2ptLeadTrk,
                'J2vtxMass': iChain.J2vtxMass,
                'J2vtxPt': iChain.J2vtxPt,
                'J2Ntot': iChain.J2Ntot,
                'J2SoftLeptPt': iChain.J2SoftLepPt,
                'J2SoftLeptEta': iChain.J2SoftLepEta,
                'J2SoftLeptPhi': iChain.J2SoftLepPhi,
                'J2SoftLeptPID': iChain.J2SoftLepPID,
                'J2JECUnc': iChain.J2JECUnc,
                'J2Et': iChain.J2Et,
                'J2Mt': iChain.J2Mt,

                'J3PtUncorr': iChain.J3PtUncorr,
                'J3VtxPt': iChain.J3VtxPt,
                'J3Vtx3dL': iChain.J3Vtx3dL,
                'J3Vtx3deL': iChain.J3Vtx3deL,
                'J3ptLeadTrk': iChain.J3ptLeadTrk,
                'J3vtxMass': iChain.J3vtxMass,
                'J3vtxPt': iChain.J3vtxPt,
                'J3Ntot': iChain.J3Ntot,
                'J3SoftLeptPt': iChain.J3SoftLepPt,
                'J3SoftLeptEta': iChain.J3SoftLepEta,
                'J3SoftLeptPhi': iChain.J3SoftLepPhi,
                'J3SoftLeptPID': iChain.J3SoftLepPID,
                'J3JECUnc': iChain.J3JECUnc,
                'J3Et': iChain.J3Et,
                'J3Mt': iChain.J3Mt,

                'J4PtUncorr': iChain.J4PtUncorr,
                'J4VtxPt': iChain.J4VtxPt,
                'J4Vtx3dL': iChain.J4Vtx3dL,
                'J4Vtx3deL': iChain.J4Vtx3deL,
                'J4ptLeadTrk': iChain.J4ptLeadTrk,
                'J4vtxMass': iChain.J4vtxMass,
                'J4vtxPt': iChain.J4vtxPt,
                'J4Ntot': iChain.J4Ntot,
                'J4SoftLeptPt': iChain.J4SoftLepPt,
                'J4SoftLeptEta': iChain.J4SoftLepEta,
                'J4SoftLeptPhi': iChain.J4SoftLepPhi,
                'J4SoftLeptPID': iChain.J4SoftLepPID,
                'J4JECUnc': iChain.J4JECUnc,
                'J4Et': iChain.J4Et,
                'J4Mt': iChain.J4Mt,

                'J1Eta': iChain.J1Eta,
                'J1Mass': iChain.J1Mass,
                'J1Pt': iChain.J1Pt,
                'J1Phi': iChain.J1Phi,
                'J2Eta': iChain.J2Eta,
                'J2Mass': iChain.J2Mass,
                'J2Pt': iChain.J2Pt,
                'J2Phi': iChain.J2Phi,
                'J3Eta': iChain.J3Eta,
                'J3Mass': iChain.J3Mass,
                'J3Pt': iChain.J3Pt,
                'J3Phi': iChain.J3Phi,
                'J4Eta': iChain.J4Eta,
                'J4Mass': iChain.J4Mass,
                'J4Pt': iChain.J4Pt,
                'J4Phi': iChain.J4Phi,
    }
    

    if varName in varsDict:
        return varsDict[varName]
    else:
        print 'Variable: %s not defined in varList.py' %varName
        return 'Null'

def findVarInChain_Data_speed(iChain, varName1, varName2):
    varsDict = {
                'J1': (iChain.J1PtUncorr, iChain.J1VtxPt, iChain.J1Vtx3dL, iChain.J1Vtx3deL,
                        iChain.J1ptLeadTrk, iChain.J1vtxMass, iChain.J1vtxPt, iChain.J1Ntot,
                        iChain.J1SoftLepPt, iChain.J1SoftLepEta, iChain.J1SoftLepPhi, iChain.J1SoftLepPID,
                        iChain.J1JECUnc, iChain.J1Et, iChain.J1Mt, iChain.J1Pt, iChain.J1Eta, iChain.J1Phi, iChain.J1Mass),
                'J2': (iChain.J2PtUncorr, iChain.J2VtxPt, iChain.J2Vtx3dL, iChain.J2Vtx3deL,
                        iChain.J2ptLeadTrk, iChain.J2vtxMass, iChain.J2vtxPt, iChain.J2Ntot,
                        iChain.J2SoftLepPt, iChain.J2SoftLepEta, iChain.J2SoftLepPhi, iChain.J2SoftLepPID,
                        iChain.J2JECUnc, iChain.J2Et, iChain.J2Mt, iChain.J2Pt, iChain.J2Eta, iChain.J2Phi, iChain.J2Mass),
                'J3': (iChain.J3PtUncorr, iChain.J3VtxPt, iChain.J3Vtx3dL, iChain.J3Vtx3deL,
                        iChain.J3ptLeadTrk, iChain.J3vtxMass, iChain.J3vtxPt, iChain.J3Ntot,
                        iChain.J3SoftLepPt, iChain.J3SoftLepEta, iChain.J3SoftLepPhi, iChain.J3SoftLepPID,
                        iChain.J3JECUnc, iChain.J3Et, iChain.J3Mt, iChain.J3Pt, iChain.J3Eta, iChain.J3Phi, iChain.J3Mass),
                'J4': (iChain.J4PtUncorr, iChain.J4VtxPt, iChain.J4Vtx3dL, iChain.J4Vtx3deL,
                        iChain.J4ptLeadTrk, iChain.J4vtxMass, iChain.J4vtxPt, iChain.J4Ntot,
                        iChain.J4SoftLepPt, iChain.J4SoftLepEta, iChain.J4SoftLepPhi, iChain.J4SoftLepPID,
                        iChain.J4JECUnc, iChain.J4Et, iChain.J4Mt, iChain.J4Pt, iChain.J4Eta, iChain.J4Phi, iChain.J4Mass),
                'J5': (iChain.J5PtUncorr, iChain.J5VtxPt, iChain.J5Vtx3dL, iChain.J5Vtx3deL,
                        iChain.J5ptLeadTrk, iChain.J5vtxMass, iChain.J5vtxPt, iChain.J5Ntot,
                        iChain.J5SoftLepPt, iChain.J5SoftLepEta, iChain.J5SoftLepPhi, iChain.J5SoftLepPID,
                        iChain.J5JECUnc, iChain.J5Et, iChain.J5Mt, iChain.J5Pt, iChain.J5Eta, iChain.J5Phi, iChain.J5Mass),
                'J6': (iChain.J6PtUncorr, iChain.J6VtxPt, iChain.J6Vtx3dL, iChain.J6Vtx3deL,
                        iChain.J6ptLeadTrk, iChain.J6vtxMass, iChain.J6vtxPt, iChain.J6Ntot,
                        iChain.J6SoftLepPt, iChain.J6SoftLepEta, iChain.J6SoftLepPhi, iChain.J6SoftLepPID,
                        iChain.J6JECUnc, iChain.J6Et, iChain.J6Mt, iChain.J6Pt, iChain.J6Eta, iChain.J6Phi, iChain.J6Mass),
    }
    if varName1 in varsDict and varName2 in varsDict:
        return varsDict[varName1]+varsDict[varName2]
    else:
        print 'Variable: %s not defined in varList.py' %varName1
        return 'Null'

def findVarInChain_GenJet_speed(iChain, varName):
    varsDict = {
                'J1': (iChain.J1GenPt, iChain.J1GenEta, iChain.J1GenPhi, iChain.J1GenMass),
                'J2': (iChain.J2GenPt, iChain.J2GenEta, iChain.J2GenPhi, iChain.J2GenMass),
                'J3': (iChain.J3GenPt, iChain.J3GenEta, iChain.J3GenPhi, iChain.J3GenMass),
                'J4': (iChain.J4GenPt, iChain.J4GenEta, iChain.J4GenPhi, iChain.J4GenMass),

    }    
    if varName in varsDict:
        return varsDict[varName]
    else:
        print 'Variable: %s not defined in varList.py' %varName
        return 'Null'